#include <stdio.h>
#include <stdlib.h>

// Definition of the Node structure
typedef struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}

// Function to append a node at the end of the list
void append(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    Node* last = *head;
    while (last->next != NULL) {
        last = last->next;
    }
    last->next = newNode;
    newNode->prev = last;
}

// Function to display the linked list from head to tail
void displayForward(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        printf("%d <-> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Function to display the linked list from tail to head
void displayBackward(Node* head) {
    Node* temp = head;
    if (temp == NULL) return;

    // Go to the end of the list
    while (temp->next != NULL) {
        temp = temp->next;
    }

    // Traverse backward
    while (temp != NULL) {
        printf("%d <-> ", temp->data);
        temp = temp->prev;
    }
    printf("NULL\n");
}

// Function to delete a node with given key
void deleteNode(Node** head, int key) {
    Node* temp = *head;

    // If the head node itself holds the key
    if (temp != NULL && temp->data == key) {
        *head = temp->next;
        if (*head != NULL) {
            (*head)->prev = NULL;
        }
        free(temp);
        return;
    }

    // Search for the key to be deleted
    while (temp != NULL && temp->data != key) {
        temp = temp->next;
    }

    // If key was not present in the list
    if (temp == NULL) return;

    // Unlink the node from the doubly linked list
    if (temp->next != NULL) {
        temp->next->prev = temp->prev;
    }
    if (temp->prev != NULL) {
        temp->prev->next = temp->next;
    }
    free(temp);
}

int main() {
    Node* head = NULL;

    // Append some nodes
    append(&head, 10);
    append(&head, 20);
    append(&head, 30);

    // Display the list forward
    printf("Linked List (Forward): ");
    displayForward(head);

    // Display the list backward
    printf("Linked List (Backward): ");
    displayBackward(head);

    // Delete a node
    deleteNode(&head, 20);
    printf("After deleting 20 (Forward): ");
    displayForward(head);
    printf("After deleting 20 (Backward): ");
    displayBackward(head);

    return 0;
}


SAMPLE OUTPUT
Linked List (Forward): 10 <-> 20 <-> 30 <-> NULL
Linked List (Backward): 30 <-> 20 <-> 10 <-> NULL
After deleting 20 (Forward): 10 <-> 30 <-> NULL
After deleting 20 (Backward): 30 <-> 10 <-> NULL
