#include <stdio.h>

#define MAX_SIZE 100  // Maximum size of the array

// Function to insert an element at a specified position
void insert(int arr[], int *size, int element, int position) {
    if (*size >= MAX_SIZE) {
        printf("Array is full, cannot insert.\n");
        return;
    }
    if (position < 0 || position > *size) {
        printf("Invalid position.\n");
        return;
    }

    // Shift elements to the right
    for (int i = *size; i > position; i--) {
        arr[i] = arr[i - 1];
    }

    // Insert the element
    arr[position] = element;
    (*size)++;
}

// Function to delete an element at a specified position
void delete(int arr[], int *size, int position) {
    if (*size == 0) {
        printf("Array is empty, cannot delete.\n");
        return;
    }
    if (position < 0 || position >= *size) {
        printf("Invalid position.\n");
        return;
    }

    // Shift elements to the left
    for (int i = position; i < *size - 1; i++) {
        arr[i] = arr[i + 1];
    }

    (*size)--;
}

// Function to search for an element
int search(int arr[], int size, int element) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == element) {
            return i;  // Return the index of the element
        }
    }
    return -1;  // Element not found
}

// Function to update an element at a specific position
void update(int arr[], int size, int position, int newValue) {
    if (position < 0 || position >= size) {
        printf("Invalid position.\n");
        return;
    }

    arr[position] = newValue;
}

// Function to traverse and print the array elements
void traverse(int arr[], int size) {
    printf("Array elements: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int arr[MAX_SIZE];
    int size = 0;  // Current number of elements in the array

    // Insertion
    insert(arr, &size, 10, 0);  // Insert 10 at position 0
    insert(arr, &size, 20, 1);  // Insert 20 at position 1
    insert(arr, &size, 30, 2);  // Insert 30 at position 2
    insert(arr, &size, 15, 1);  // Insert 15 at position 1
    traverse(arr, size);

    // Deletion
    delete(arr, &size, 2);  // Delete element at position 2
    traverse(arr, size);

    // Searching
    int index = search(arr, size, 20);
    if (index != -1) {
        printf("Element found at index: %d\n", index);
    } else {
        printf("Element not found.\n");
    }

    // Updating
    update(arr, size, 1, 25);  // Update element at position 1 to 25
    traverse(arr, size);

    return 0;
}



SAMPLE OUTPUT
Array elements: 10 15 20 30 
Array elements: 10 15 30 
Element found at index: 1
Array elements: 10 25 30
